//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/KosakaKen/DictationAI/InputAction/MainInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace KosakaKen.DictationAI.Scripts.Client
{
    public partial class @MainInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MainInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInput"",
    ""maps"": [
        {
            ""name"": ""ControllerButton"",
            ""id"": ""88f571c9-851d-4545-8a61-b5890451bcba"",
            ""actions"": [
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""f7976116-7061-410d-8fac-df4504210c3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""86f8afca-868d-4cb0-968a-6bb76d72bc87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a212b0d6-2d0c-42e0-a7e2-041be1ac2e69"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53b4447e-b8d7-46c6-a580-a6931d1ae58c"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ControllerButton
            m_ControllerButton = asset.FindActionMap("ControllerButton", throwIfNotFound: true);
            m_ControllerButton_LeftTrigger = m_ControllerButton.FindAction("LeftTrigger", throwIfNotFound: true);
            m_ControllerButton_RightTrigger = m_ControllerButton.FindAction("RightTrigger", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ControllerButton
        private readonly InputActionMap m_ControllerButton;
        private List<IControllerButtonActions> m_ControllerButtonActionsCallbackInterfaces = new List<IControllerButtonActions>();
        private readonly InputAction m_ControllerButton_LeftTrigger;
        private readonly InputAction m_ControllerButton_RightTrigger;
        public struct ControllerButtonActions
        {
            private @MainInput m_Wrapper;
            public ControllerButtonActions(@MainInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftTrigger => m_Wrapper.m_ControllerButton_LeftTrigger;
            public InputAction @RightTrigger => m_Wrapper.m_ControllerButton_RightTrigger;
            public InputActionMap Get() { return m_Wrapper.m_ControllerButton; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControllerButtonActions set) { return set.Get(); }
            public void AddCallbacks(IControllerButtonActions instance)
            {
                if (instance == null || m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Add(instance);
                @LeftTrigger.started += instance.OnLeftTrigger;
                @LeftTrigger.performed += instance.OnLeftTrigger;
                @LeftTrigger.canceled += instance.OnLeftTrigger;
                @RightTrigger.started += instance.OnRightTrigger;
                @RightTrigger.performed += instance.OnRightTrigger;
                @RightTrigger.canceled += instance.OnRightTrigger;
            }

            private void UnregisterCallbacks(IControllerButtonActions instance)
            {
                @LeftTrigger.started -= instance.OnLeftTrigger;
                @LeftTrigger.performed -= instance.OnLeftTrigger;
                @LeftTrigger.canceled -= instance.OnLeftTrigger;
                @RightTrigger.started -= instance.OnRightTrigger;
                @RightTrigger.performed -= instance.OnRightTrigger;
                @RightTrigger.canceled -= instance.OnRightTrigger;
            }

            public void RemoveCallbacks(IControllerButtonActions instance)
            {
                if (m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IControllerButtonActions instance)
            {
                foreach (var item in m_Wrapper.m_ControllerButtonActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ControllerButtonActions @ControllerButton => new ControllerButtonActions(this);
        public interface IControllerButtonActions
        {
            void OnLeftTrigger(InputAction.CallbackContext context);
            void OnRightTrigger(InputAction.CallbackContext context);
        }
    }
}
